<?php
namespace app\api\controller;

use Qiniu\Auth;

class Upload extends Common
{

    protected $fsizeLimit=0;//文件上传大小

    protected $need_login=false;

    private $root_path;
    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->root_path = \think\facade\Env::get('root_path');
        $this->fsizeLimit = empty(config('qiniu.fsizeLimit'))?0:config('qiniu.fsizeLimit');
    }

    //获取上传凭证
    public function info($type='image')
    {
        $data = [
            'upload_token' => '',
            'preview_domain' => request()->domain(),
            'url' => url('upload',[],false,true).'?type='.$type,
        ];
        // 初始化签权对象
        if(!empty(config('qiniu.is_use'))){
            $auth = new Auth(config('qiniu.ak'), config('qiniu.sk'));
            $upload_token = $auth->uploadToken(config('qiniu.bucket'),null,config('qiniu.expires'),[
                'saveKey' => config('qiniu.file_prefix').$type.'/'.date('Ymd').'/'.uniqid($this->user_id.'_').'$(ext)',
                'forceSaveKey' => true,
                'fsizeLimit' => $this->fsizeLimit,
                'returnBody' => json_encode(['code'=>0,'msg'=>'上传成功','data'=>[
                    'avinfo' => ['duration'=>'$(avinfo.video.duration)'],
                    'key' => '$(key)',
                    'hash' => '$(etag)',
                    'w' => '$(imageInfo.width)',
                    'h' => '$(imageInfo.height)',
                    'fsize' => '$(fsize)',
                    'ext' => '$(ext)',//上传资源的后缀名，通过自动检测的 mimeType 或者$(fname)的后缀来获取。
                    'mime_type' => '$(mimeType)'
                ]])
            ]);

            $data['upload_token'] =$upload_token;
            $data['url'] =config('qiniu.url');
        }
        return $this->_resData(1,'获取成功',$data);

    }


    //上传
    public function upload($type='image')
    {

        $upload_file_key=key($_FILES);
        // 获取表单上传文件 例如上传了001.jpg
        $file = request()->file($upload_file_key);
        empty($file) && abort(0,'请选择上传文件');
        //上传路径
        $save_path = '/uploads/'.$type.'/'.date('Ymd');
//        !$open_dir_month && $save_path = $save_path.date('Yhm');
        // 移动到框架应用根目录/uploads/ 目录下
        $user_id = $this->user_id;
        $mine_type = 'file';
        $info = $file
            ->validate(['size'=>$this->fsizeLimit])
            ->rule(function($obj)use(&$mine_type,$user_id){
                $file_info = $obj->getInfo();
                isset($file_info['type']) && $mine_type = $file_info['type'];
                return (empty($user_id)?'':$user_id).'_'.md5(json_encode($file_info));
            })
            ->move( $this->root_path.$save_path);
        if($info){
//            dump($info);exit;
            // 成功上传后 获取上传信息
            $data = [
                'key'=>str_replace('\\','/',$save_path.$info->getSaveName()),
                'fsize' => $info->getSize(),
                'ext' => '.'.$info->getExtension(),
                'mime_type' => $mine_type,
            ];

            return array_merge([ 'code'=>1,'msg'=>'上传成功'],['data'=>$data]);
        }else{
            // 上传失败获取错误信息
            return [ 'code'=>0,'msg'=>$file->getError()];
        }
    }
}